# -*- coding: utf-8 -*-
"""EV2_PrograAvan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wQVLhuFc_PzYrCn7-FiblAKs23siZXej

# Evidencia #2 Programacion Avanzada.
Repositorio de software compartido que contendrá los componentes desarrollados en esta fase.

Tema 43
Problema 1:
Implementaremos una clase llamada Persona que tendrá como atributo (variable) su nombre y dos métodos (funciones), uno de dichos métodos inicializará el atributo nombre y el siguiente método mostrará en la pantalla el contenido del mismo.
Definir dos objetos de la clase Persona.
"""

class Persona:

    def inicializar(self,nom):
        self.nombre=nom

    def imprimir(self):
        print("Nombre",self.nombre)


# bloque principal

persona1=Persona()
persona1.inicializar("Marco")
persona1.imprimir()

persona2=Persona()
persona2.inicializar("Majo")
persona2.imprimir()

"""Problema 2:
Implementar una clase llamada Alumno que tenga como atributos su nombre y su nota. Definir los métodos para inicializar sus atributos, imprimirlos y mostrar un mensaje si está regular (nota mayor o igual a 4)
Definir dos objetos de la clase Alumno.
"""

class Alumno:

    def inicializar(self,nombre,nota):
        self.nombre=nombre
        self.nota=nota

    def imprimir(self):
        print("Nombre:",self.nombre)
        print("Nota:",self.nota)

    def mostrar_estado(self):
        if self.nota>=4:
            print("Regular")
        else:
            print("Libre")

# bloque principal

alumno1=Alumno()
alumno1.inicializar("Marco",2)
alumno1.imprimir()
alumno1.mostrar_estado()

alumno2=Alumno()
alumno2.inicializar("Majo",10)
alumno2.imprimir()
alumno2.mostrar_estado()

"""Problemas propuestos:
Confeccionar una clase que permita carga el nombre y la edad de una persona. Mostrar los datos cargados. Imprimir un mensaje si es mayor de edad (edad>=18).
"""

class Persona:

  def inicializar(self,nombre,edad):
    self.nombre=nombre
    self.edad=edad

  def imprimir(self):
    print('Nombre', self.nombre)
    print('Edad', self.edad)

  def mayor_edad(self):
    if self.edad>=18:
      print('Es mayor de Edad')
    else:
      print('Es menor de Edad')

#Bloque Principal
personal= Persona()
personal.inicializar('Marco',18)
personal.imprimir()
personal.mayor_edad()

"""Problemas Propuestos: Desarrollar un programa que cargue los lados de un triángulo e implemente los siguientes métodos: inicializar los atributos, imprimir el valor del lado mayor y otro método que muestre si es equilátero o no. El nombre de la clase llamarla Triangulo."""

class Triangulo:

  def inicializar(self):
    self.lado1=int(input('Ingrese el primer lado:'))
    self.lado2=int(input('Ingrese el segundo lado:'))
    self.lado3=int(input('Ingrese el tercer lado:'))

  def imprimir(self):
    print('Lado1:', self.lado1)
    print('Lado2:', self.lado2)
    print('Lado3:', self.lado3)

  def lado_mayor(self):
    print('lado_mayor')
    if self.lado1>self.lado2 and self.lado1>self.lado3:
       print(self.lado1)
    else:
      if self.lado2>self.lado3:
        print(self.lado2)
      else:
        print(self.lado3)

  def es_equilatero(self):
    if self.lado1==self.lado2 and self.lado1==self.lado3:
      print('El Triangulo es Equilatero')
    else:
      print('El Triangulo no es Equilatero')

#Bloque Principal
triangulo1=Triangulo()
triangulo1.inicializar()
triangulo1.imprimir()
triangulo1.lado_mayor()
triangulo1.es_equilatero()

"""TEMA 44
Problema 1:
Confeccionar una clase que represente un empleado. Definir como atributos su nombre y su sueldo. En el método __init__ cargar los atributos por teclado y luego en otro método imprimir sus datos y por último uno que imprima un mensaje si debe pagar impuestos (si el sueldo supera a 3000).
"""

class Empleado:

    def __init__(self):
        self.nombre=input("Ingrese el nombre del empleado:")
        self.sueldo=float(input("Ingrese el sueldo:"))

    def imprimir(self):
        print("Nombre:",self.nombre)
        print("Sueldo:",self.sueldo)

    def paga_impuestos(self):
        if self.sueldo>3000:
            print("Debe pagar impuestos")
        else:
            print("No paga impuestos")

# Bloque Principal

empleado1=Empleado()
empleado1.imprimir()
empleado1.paga_impuestos()

"""Problema 2:
Desarrollar una clase que represente un punto en el plano y tenga los siguientes métodos: inicializar los valores de x e y que llegan como parámetros, imprimir en que cuadrante se encuentra dicho punto (concepto matemático, primer cuadrante si x e y son positivas, si x<0 e y>0 segundo cuadrante, etc.)
"""

class Punto:

    def __init__(self,x,y):
        self.x=x
        self.y=y

    def imprimir(self):
        print("Coordenada del punto")
        print("(",self.x,",",self.y,")")

    def imprimir_cuadrante(self):
        if self.x>0 and self.y>0:
            print("Primer cuadrange")
        else:
            if self.x<0 and self.y>0:
                print("Segundo cuadrante")
            else:
                if self.x<0 and self.y<0:
                    print("Tercer cuadrante")
                else:
                    if self.x>0 and self.y<0:
                        print("Cuarto cuadrante")

# Bloque Principal

punto1=Punto(10,-2)
punto1.imprimir()
punto1.imprimir_cuadrante()

"""Problemas propuestos:
Desarrollar una clase que represente un Cuadrado y tenga los siguientes métodos: inicializar el valor del lado llegando como parámetro al método __init__ (definir un atributo llamado lado), imprimir su perímetro y su superficie.
"""

class Cuadrado:

  def __init__(self,lado):
    self.lado=lado

  def mostrar_perimetro(self):
    perimetro=self.lado*4
    print('El Perimetro del cuadrado es:', perimetro)

  def mostrar_superficie(self):
    superficie=self.lado * self.lado
    print('La superficie del cuadrado es de:', superficie)

#Bloque Principal
cuadrado1=Cuadrado(15)
cuadrado1.mostrar_perimetro()
cuadrado1.mostrar_superficie()

"""Problemas Propuestos: Implementar la clase Operaciones. Se deben cargar dos valores enteros por teclado en el método __init__, calcular su suma, resta, multiplicación y división, cada una en un método, imprimir dichos resultados."""

class Operaciones:

  def __init__(self):
    self.valor1=int(input('Ingrese el Primer Valor:'))
    self.valor2=int(input('Ingrese el Segundo Valor:'))

  def sumar(self):
    suma=self.valor1+self.valor2
    print('La Suma es de: ', suma)

  def resta(self):
    resta=self.valor1-self.valor2
    print('La Resta es de: ', resta)

  def multiplicar(self):
    multi=self.valor1*self.valor2
    print('La Multiplicacion es de: ', multi)

  def division(self):
    divi=self.valor1/self.valor2
    print('La Division es de: ', divi)

#Bloque Principal
operacion1=Operaciones()
operacion1.sumar()
operacion1.resta()
operacion1.multiplicar()
operacion1.division()