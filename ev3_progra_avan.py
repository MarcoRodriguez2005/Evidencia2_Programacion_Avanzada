# -*- coding: utf-8 -*-
"""EV3_Progra_Avan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YzKBsspcOZLEq3MX5-BZcsNt3aSVHPru

**Nombre: Marco Antonio Rodriguez Barrera**
# **Evidencia #3:** Repositorio de software compartido que contendrá los componentes desarrollados en esta fase.

**Ejercicio #1** Manejo de Archivos.
"""

# Lista a escribir en un archivo.
marcas=["Audi\n","Alfa Romeo\n","BMW\n","Mercedes Benz\n"]
# Se abre en modo Write Extended, que permite lectura.
with open("marcas.txt","w+") as f:
 # Escribe cada elemento de la lista como una línea
 f.writelines(marcas)
 # Se va al inicio del archivo.
 f.seek(0,0)
 # Lee secuencialmente el archivo, desde el inicio.
 for linea in f:
  print(linea)

"""**Ejercicio #2** Trabajando con archivos CSV."""

# Datos iniciales. Entradas es una lista que contiene listas.
Entradas=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
for e in Entradas:
 print(f'{e[0]}|{e[1]}|{e[2]}')

"""**Ejercicio #3** Trabajando con archivos CSV."""

# Datos iniciales. Entradas es una lista que contiene listas.
Entradas=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
# Se imprime el contenido de la lista, para cotejar.
print(">> Contenido de la lista.\n")
print(Entradas)
# Revisa si existe el CSV, en cuyo caso, si existe el BAK lo elimina
# y renombra el CSV como BAK
if os.path.exists("agenda.csv"):
 if (os.path.exists("agenda.bak")):
   os.remove("agenda.bak")
   os.rename("agenda.csv","agenda.bak")
# Se escribe el contenido de la lista, usando with y F-String
with open("agenda.csv","w+") as f:
 for e in Entradas:
  f.write(f"{e[0]}|{e[1]}|{e[2]}\n")
# Se revisa el contenido del archivo.
print("\n>> Contenido del archivo.\n")
with open("agenda.csv") as f:
 print(f.read())

"""**Ejercicio #4** Trabajando con archivos CSV."""

# Se crea una lista vacía.
Datos=[]
# Se lee el archivo de forma secuencial, y se agregan los elementos
# a la lista.
with open("agenda.csv","r") as f:
 # Se lee secuencialmente el archivo de texto.
 for linea in f:
 # Se toma el texto de la línea leída, y se divide tomando como separador
 # el caracter pipe. La función retorna una lista, donde cada parte del
 # texto es un elemento.
  lista=linea.split("|")
 # El último elemento contiene \n como salto de linea. Se remplaza por nada.
 lista[2]=lista[2].replace("\n","")
 Datos.append(lista)

# Se revisa el contenido de la lista
print(">> Contenido de la nueva lista.\n")
print(Datos)

Datos=[]
with open("agenda.csv","r+") as f:
 for linea in f:
  lista=linea.split("|")
  lista[2]=lista[2].replace("\n","")
  Datos.append(lista)

"""**Ejercicio #5** Serialización JSON y Pickle."""

# Se importa el módulo para trabajar con JSON.
import json
# Se crea un objeto de muestra, para serializar.
Original=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
print(">> Tipo del objeto.\n")
print(type(Original))
print("\n>> Contenido del objeto.\n")
print(Original)
print("\n>> Serialización a JSON.\n")
Original_JSON=json.dumps(Original,indent=4)
print(Original_JSON)
print("\n>> Deserialización desde JSON.\n")
Nueva_Lista=json.loads(Original_JSON)
print(Nueva_Lista)
print(type(Nueva_Lista))
print("\n>> Comprobando igualdad de objetos.\n")
print(Original==Nueva_Lista)

"""**Ejercicio #6** Serialización JSON y Pickle."""

# Se importa el módulo para trabajar con JSON.
import json
# Se crea un objeto de muestra, para serializar.
Original=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
# Grabando el JSON en un archivo.
with open("archivo.json","w+") as f:
 json.dump(Original,f,indent=4)
# Leyendo datos de un archivo json
with open("archivo.json","r") as f:
 recuperados=json.load(f)
print(recuperados)
print("\n>> Comprobando igualdad de objetos.\n")
print(Original==recuperados)

"""**Ejercicio #7** Serialización usando Pickle."""

# Se importa el módulo para trabajar con JSON.
import json
# Se crea un objeto de muestra, para serializar.
Original=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
# Se importa el módulo para trabajar con JSON.
import pickle
# Observa cómo pickle es un formato binario.
print("\n>> Serialización a Pickle.\n")
Original_pickle=pickle.dumps(Original)
print(Original_pickle)
print("\n>> Deserialización desde Pickle.\n")
Nueva_Lista=pickle.loads(Original_pickle)
print(Nueva_Lista)
print(type(Nueva_Lista))
print("\n>> Comprobando igualdad de objetos.\n")
print(Original==Nueva_Lista)

"""**Ejercicio #8** Serialización usando Pickle."""

# Se importa el módulo para trabajar con JSON.
import json
# Se crea un objeto de muestra, para serializar.
Original=[
 ['correo','nombre','telefono'],
 ['juan@gmail.com','Juan','8123232323'],
 ['maria@gmail.com','Maria','5545454545'],
 ['diana@homail.com','Diana','4490909090']
]
# Grabando el pickle en un archivo.
with open("archivo.pickle","wb+") as f:
 pickle.dump(Original,f)
# Leyendo datos de un archivo pickle
with open("archivo.pickle","rb") as f:
 recuperados=pickle.load(f)
print(recuperados)
print("\n>> Comprobando igualdad de objetos.\n")
print(Original==recuperados)